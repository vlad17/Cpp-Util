Cpp-Util

This is a collection of some data structures I have been working on recently.

Requires cmake 2.6+ and gcc 4.7+

To run tests:
cmake .
make -j
make test

TODO:
        shared queue try_deque and try_* testing (unit + multithreaded)
               for multithreaded try_*, just reuse old mt code and loop + wait.
        add std::condition_variable to shared_queue, test (notify all if not empty, single if was), test perf gains
        rename every *.h to *.hpp
        namespace for individual libraries
        implement Countdown latch 
        finish TODOs in MPMC test after
        hazard_ptr structure (http://www.drdobbs.com/lock-free-data-structures-with-hazard-po/184401890)
        hazard_queue (same as shared_queue, but instead of shared_ptr use hazard_ptr)
        boost::spinlock
        Add spinlock to atomic_shared.h implementation (perf check if better)
        perf check shared_queue vs lfqueue (vs boost queue ?)
        document throws for pthreads (look at the "too many readers" return val, maybe spin?)
        implement SingularThreadpool (1t)
        DynamicThreadpool (min, max, timeout)
        WorkStealingThreadpool # not fair, uses distributor
        clean up TODOs in code
        Create exception-based test file - use multithreaded exceptions.
        create test-testandset spinlock, and then queuelock (with everyhting, Art of mpp ch.7) 
        Test against boost spinlock
        Create assert-based tests
	concurrent heap_cache (finish testing & debugging)
	exact_heap_cache (see lfu_cache.h) - make separate method in main for comparison/stress
	linked_cache (see lfu_cache.h)
	-> concurrent versions of exact_heap_cache and linked_cache (clean up the entire mess)
	fibheap (check file for TODOs)
	valgrind check everything
	