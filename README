Cpp-Util

This is a collection of some data structures I have been working on recently.

My MPMC queue seems to be on par with, if occasionally better, than boost's!
check out results at the end of this document, and the test if you don't believe 
me.

Requires cmake 2.6+ and a c++11 supporting compiler.

Requires boost installed and available in system headers.

To run tests:
cmake . # specify -DCMAKE_CXX_COMPILER=... if it's not g++
make -j`nproc`
ctest -j`nproc`

Other cmake options are:
-DCMAKE_BUILD_TYPE=(debug|release) - specifies build setting
-DASSERTIONS_ON=(1|0) - specifies whether to turn on assertions, on by default for debug
  and off by default for release (this flag overrides those defaults).
        
For quick building and testing, use "chmod 700 build-and-test.sh"
Then ./build-and-test.sh

TODO:
        generalized randomness seed setting
        random in cdl
        start/complete test functions (print like ctest)
        hazard_ptr structure (http://www.drdobbs.com/lock-free-data-structures-with-hazard-po/184401890)
        hazard_queue (same as shared_queue, but instead of shared_ptr use hazard_ptr, also empty can use head == tail + invalid)
        check hazard_queue vs shared_queue
        document throws for pthreads (look at the "too many readers" return val, maybe spin?)
        cache and fibheap are terribly slow. speed them up.
        fix up tests everywhere
        minimal flag parser
        suffix tries + ukkonen construct
        implement SingularThreadpool (1t) (mpsc)
        WorkStealingThreadpool # (using mpmc for each thread)
        clean up TODOs in code
        Create exception-based test file - use multithreaded exceptions.
        create test-testandset spinlock, and then queuelock (with everyhting, Art of mpp ch.7) 
        Test against boost spinlock
        Create assert-based tests
	concurrent heap_cache (finish testing & debugging)
	exact_heap_cache (see lfu_cache.h) - make separate method in main for comparison/stress
	linked_cache (see lfu_cache.h)
	-> concurrent versions of exact_heap_cache and linked_cache (clean up the entire mess)
	fibheap (check file for TODOs)
	valgrind check everything
        speed up assertions (worth it?)
	Use a lazily updated bool instead of insert_version_ and remove_version to denote "empty" in shared_queue.h

(Run `./release/mpmc-test.exe bench boost`)

MPMC Queue Benchmark

Boost Queue
	Enqueues (8x100000): 127ms
	Dequeues (8x100000): 78ms
	Fair mpmc (~1000000 items, 4 enq, 4 deq): 201ms
	Enqueue-weighted mpmc (~1000000 items, 6 enq, 2 deq): 148ms
	Dequeue-weighted mpmc (~1000000 items, 2 enq, 6 deq): 179ms

Shared Queue
	Enqueues (8x100000): 109ms
	Dequeues (8x100000): 1117ms
	Fair mpmc (~1000000 items, 4 enq, 4 deq): 134ms
	Enqueue-weighted mpmc (~1000000 items, 6 enq, 2 deq): 158ms
	Dequeue-weighted mpmc (~1000000 items, 2 enq, 6 deq): 107ms
