Cpp-Util

This is a collection of some data structures I have been working on recently.

Requires cmake 2.6+ and gcc 4.7+

To run tests:
cmake .
make -j
make test

TODO:
        shared queue finish (cleanup the TODOs)
        rename every *.h to *.hpp
        namespace for individual libraries
        shared testing
        reverse head/tail names
        condition variable wrapper pthreads
        implement Countdown latch
        document throws for pthreads (look at the "too many readers" return val, maybe spin?)
        implement SingularThreadpool (1t)
        DynamicThreadpool (min, max, timeout)
        WorkStealingThreadpool # not fair, uses distributor
        add condition to shared_queue, test (notify all if not empty, single if was)
        stamped reference class (wait or lock free?) (needed?)
        lock free queue (use node pool)
        lock free queue testing 
        perf check shared_queue vs lfqueue (vs boost queue ?)
        clean up TODOs in code
        Create exception-based test file - use multithreaded exceptions.
        create test-testandset spinlock, and then queuelock (with everyhting, Art of mpp ch.7) 
        Test agains boost spinlock
        Add spinlock to atomic_shared.h implementation
        Create assert-based tests
	concurrent heap_cache (finish testing & debugging)
	exact_heap_cache (see lfu_cache.h) - make separate method in main for comparison/stress
	linked_cache (see lfu_cache.h)
	-> concurrent versions of exact_heap_cache and linked_cache
	fibheap (check file for TODOs)
	valgrind check everything
	