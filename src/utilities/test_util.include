/*
  Vladimir Feinberg
  test_util.include
  2014-08-02

  Contains implementation of all the macros used in the basic
  testing header. Keeps details away from test-util.h file.

  This implementation is inspired by gtest, but that's where the
  connnection ends    
*/

#include <iostream>
#include <sstream>
#include <stdexcept>
#include <string>

class test_error : public std::runtime_error {
 public:
  using runtime_error::runtime_error;
};

#define __TEST_UTIL_INCLUDE_ASSERT(expr, msg) do { \
          if (!(expr)) { \
            std::stringstream sstr; \
            sstr << "Expr `" << std::string(#expr) << "` failed"; \
            sstr << msg; \
            throw test_error(sstr.str()); \
          } \
        } while (0)

// From stack overflow
#define __TEST_UTIL_INCLUDE_2ARGS(expr, msg) \
        __TEST_UTIL_INCLUDE_ASSERT(expr, ": " << msg)
#define __TEST_UTIL_INCLUDE_1ARG(expr) __TEST_UTIL_INCLUDE_ASSERT(expr, ".")
#define __TEST_UTIL_INCLUDE_GET_3RD_ARG(arg1, arg2, arg3, ...) arg3
#define __TEST_UTIL_INCLUDE_MACRO_CHOOSER(...) \
        __TEST_UTIL_INCLUDE_GET_3RD_ARG(__VA_ARGS__, \
         __TEST_UTIL_INCLUDE_2ARGS, __TEST_UTIL_INCLUDE_1ARG, )
#define ASSERT(...) __TEST_UTIL_INCLUDE_MACRO_CHOOSER(__VA_ARGS__)(__VA_ARGS__)

int main() {
  try {
    test_main();
  } catch(const test_error& err) {
    std::cerr << "Unit test failure:" << std::endl;
    std::cerr << err.what() << std::endl;
    return 1;
  } catch(...) {
    std::cerr << "Unexpected exception thrown." << std::endl;
    throw;
  }
  return 0;
}
